summary_table = ret,
ddf = match.call()$ddf,
p_adj_method = p_adj_method)
if(method !="gee"){
ret2$singular_fits = genes_singular_fits
}
}
ret2$model_method=method
return(ret2)
}
test2=corrSeq.summary(nbmm_ml_fit, coefficient = "group", ddf = "residual")
View(test2)
View(test2[["summary_table"]])
corrSeq.summary <- function(corrSeq_results = NULL, # Results object from running lmerSeq.fit
coefficient = NULL, # Character string or numeric indicator of which coefficient to summarize
p_adj_method = "BH", # Method for adjusting for multiple comparisons (default is Benjamini-Hochberg)
ddf = "Satterthwaite", # Method for computing degrees of freedom and t-statistics. Options are "Satterthwaite" and "Kenward-Roger"
sort_results = T # Should the results table be sorted by adjusted p-value?
){
if(identical(names(corrSeq_results[[1]]),c("fit", "gene"))){
method="lmm"
ddf_methods=c("Satterthwaite", "Kenward-Roger", "containment", "residual")
if(!(ddf %in% ddf_methods)&!is.numeric(ddf)){
stop("Invalid ddf method")
}
#If using a different method, first just analyze using satterthwait
#This gives us t-statistic, etc.
ddf2=ddf
if(!(ddf %in% c("Satterthwaite", "Kenward-Roger"))) ddf2="Satterthwaite"
ret2=lmerSeq.summary(corrSeq_results, coefficient = coefficient,
p_adj_method = p_adj_method,
ddf=ddf2, sort_results = sort_results)
#First non-null model
if(ddf!=ddf2){
if(!is.numeric(ddf)){
idx_non_null_1<-which(sapply(corrSeq_results, function(x) !is.null(x$fit)))[1]
ddf=calc_ddf(corrSeq_results[[idx_non_null]], ddf = ddf, method=method)
}
ret2$summary_table<-ret2$summary_table%>%mutate(df=ifelse(is.na(df), NA, ddf), p_val_raw=2*pt(-abs(t.value),df=df),
p_val_adj=p.adjust(p_val_raw,
method=p_adj_method))
ret2$ddf=match.call()$ddf
}
}else{
#Check if models are Null
if( sum(sapply(corrSeq_results, is.null))){
stop("Model fits for all genes are null")
}
#Get first non-null model
idx_non_null_1=which(!sapply(corrSeq_results, is.null))[1]
#For gee models
if("geeglm"%in%class(corrSeq_results[[idx_non_null_1]])){
method="gee"
#Get coef names
coef_names <- names(corrSeq_results[[idx_non_null_1]]$coefficients)
#DDF methods for gee
ddf_methods=c("containment", "residual")
idx_not_singular=1:length(corrSeq_results)
}else if(class(corrSeq_results[[idx_non_null_1]])=="glmm_nb_mod"){
method="nbmm_pl"
coef_names<-names(lme4::fixef(corrSeq_results[[idx_non_null_1]]))
ddf_methods=c("containment", "residual", "Satterthwaite", "Kenward-Roger")
idx_singular<-which(sapply(corrSeq_results, lme4::isSingular))
idx_not_singular <- which(!sapply(corrSeq_results, lme4::isSingular))
}else if(class(corrSeq_results[[idx_non_null_1]])=="glmmadmb"){
method="nbmm_ml"
coef_names=names(coef(corrSeq_results[[idx_non_null_1]]))
idx_singular<-which(sapply(corrSeq_results, function(x) x$S$ids[1]<1e-05))
idx_not_singular<-which(!sapply(corrSeq_results, function(x) x$S$ids[1]<1e-05))
ddf_methods=c("containment", "residual")
}
gene_names <- names(corrSeq_results)
############################################################################################################
#Error Messages for insufficient or inconsistent information
############################################################################################################
if(is.numeric(coefficient)){
if((coefficient > length(coef_names)) | coefficient < 1){
stop("Coefficient number is invalid")
}
coef_out <- coef_names[coefficient]
}
else{
if(!(coefficient %in% coef_names)){
stop("Coefficient name is invalid")
}
coef_out <- coefficient
}
if(!(p_adj_method %in% p.adjust.methods)){
stop("Invalid p_adj_method")
}
if(!(ddf %in% ddf_methods)&!is.numeric(ddf)){
stop("Invalid ddf method")
}
if(ddf %in% c("Satterthwaite", "Kenward-Roger")){
ret <- do.call(rbind, lapply(corrSeq_results[idx_not_singular], function(x){
# x = corrSeq_results$fitted_models[[1]]
res_sub <- summary(x, ddf = ddf)$coefficients[coefficient, ]
return(res_sub)
}))%>%data.frame()%>%rename(p_val_raw ="Pr...t..")%>%mutate(Gene=gene_names[idx_not_singular],
p_val_adj = p.adjust(p_val_raw, method = p_adj_method))%>%
select(Gene, Estimate, Std.Error="Std..Error", "df","t.value",
p_val_raw, p_val_adj)
ret <- gtools::smartbind(ret, data.frame(Gene = genes_singular_fits))
}else{
#If df will be same for all models, calculate now
constant_ddf_methods=c("residual", "containment")
if(ddf %in% constant_ddf_methods){
ddf=calc_ddf(model = corrSeq_results[[1]],ddf = ddf, method=method)
}
ret=lapply(corrSeq_results[idx_not_singular], function(x){
#Estimate and std. error for gee
if(method=="gee"){
Estimate=x$coefficients[coefficient]
Std.Error=sqrt(x$small.samp.var[coefficient])
}else if(method=="nbmm_pl"){
Estimate=summary(x)$coefficients[coefficient,"Estimate"]
Std.Error=summary(x)$coefficients[coefficient,"Std. Error"]
}else if(method=="nbmm_ml"){
Estimate=summary(model)$coefficient[coefficient, "Estimate"]
Std.Error=summary(model)$coefficient[coefficient, "Std. Error"]
}
if(!is.numeric(ddf)){
ddf=calc_ddf(model=x, ddf=ddf, method=method)
}
t.value=Estimate/Std.Error
p_val_raw=2*pt(-abs(t.value),
df=ddf)
data.frame(Estimate=Estimate, Std.Error=Std.Error, df=ddf,
t.value=t.value, p_val_raw=p_val_raw)
})%>%bind_rows()%>%
mutate(Gene=gene_names[idx_not_singular], p_val_adj=p.adjust(p_val_raw, method = p_adj_method))%>%
select(Gene, Estimate, Std.Error, df, t.value, p_val_raw, p_val_adj)
}
if(sort_results){
ret <- ret %>%
arrange(p_val_adj)
}
rownames(ret) <- NULL
ret2 <- list(coefficient = coef_out,
summary_table = ret,
ddf = match.call()$ddf,
p_adj_method = p_adj_method)
if(method !="gee"){
genes_singular_fits <- gene_names[idx_singular]
ret2$singular_fits = genes_singular_fits
ret2$summary_table <- gtools::smartbind(ret2$summary_table, data.frame(Gene = genes_singular_fits))
}
}
ret2$model_method=method
return(ret2)
}
test2=corrSeq.summary(nbmm_ml_fit, coefficient = "group", ddf = "residual")
View(test2)
View(test2[["summary_table"]])
rm(calc_ddf())
rm(calc_ddf
)
rm(corrSeq_fit)
rm(corrSeq.summary)
devtools::document()
devtools::document()
library(corrRNASeq)
?corrSeq.summary
?corrSeq_fit
devtools::document()
library(corrRNASeq)
?corrSeq.summary
?corrSeq_fit
?corrSeq.summary
devtools::document()
devtools::document()
library(corrRNASeq)
?corrSeq_fit
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit GEE models using Wang-Long small sample size estimator
gee_fit <- corrSeq_fit(formula = ~ group * time,
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Fit NBMM-ML models
## Random effects must be factors
sample_meta_data$ids<-factor(sample_meta_data$ids)
nbmm_ml_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_ml")
## Fit LMM models to transformed data
## Read in expression data from lmerSeq package
data("expr_data")
## Transformed data (VST transformation from \code{DESeq2})
vst_expr <- expr_example$vst_expr
sample_meta_data <- expr_example$sample_meta_data
##  Only including 10 genes in the expression matrix
vst_expr <- vst_expr[1:10, ]
##  Fit the Models
lmm_fit<- corrSeq_fit(formula = ~ group * time + (1|ids),
expr_mat = vst_expr,
sample_data = sample_meta_data,
method="lmm")
devtools::document()
library(corrRNASeq)
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit GEE models using Wang-Long small sample size estimator
gee_fit <- corrSeq_fit(formula = ~ group * time,
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Fit NBMM-ML models
## Random effects must be factors
sample_meta_data$ids<-factor(sample_meta_data$ids)
nbmm_ml_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_ml")
## Fit LMM models to transformed data
## Read in expression data from lmerSeq package
data("expr_data")
## Transformed data (VST transformation from \code{DESeq2})
vst_expr <- expr_example$vst_expr
sample_meta_data <- expr_example$sample_meta_data
##  Only including 10 genes in the expression matrix
vst_expr <- vst_expr[1:10, ]
##  Fit the Models
lmm_fit<- corrSeq_fit(formula = ~ group * time + (1|ids),
expr_mat = vst_expr,
sample_data = sample_meta_data,
method="lmm")
View(lmm_fit)
View(nbmm_pl_fit)
devtools::document()
library(corrRNASeq)
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit GEE models using Wang-Long small sample size estimator
gee_fit <- corrSeq_fit(formula = ~ group * time,
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Fit NBMM-ML models
## Random effects must be factors
sample_meta_data$ids<-factor(sample_meta_data$ids)
nbmm_ml_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_ml")
## Fit LMM models to transformed data
## Read in expression data from lmerSeq package
data("expr_data")
## Transformed data (VST transformation from \code{DESeq2})
vst_expr <- expr_example$vst_expr
sample_meta_data <- expr_example$sample_meta_data
##  Only including 10 genes in the expression matrix
vst_expr <- vst_expr[1:10, ]
##  Fit the Models
lmm_fit<- corrSeq_fit(formula = ~ group * time + (1|ids),
expr_mat = vst_expr,
sample_data = sample_meta_data,
method="lmm")
devtools::document()
library(corrRNASeq)
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit GEE models using Wang-Long small sample size estimator
gee_fit <- corrSeq_fit(formula = ~ group * time,
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Fit NBMM-ML models
## Random effects must be factors
sample_meta_data$ids<-factor(sample_meta_data$ids)
nbmm_ml_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_ml")
## Fit LMM models to transformed data
## Read in expression data from lmerSeq package
data("expr_data")
## Transformed data (VST transformation from \code{DESeq2})
vst_expr <- expr_example$vst_expr
sample_meta_data <- expr_example$sample_meta_data
##  Only including 10 genes in the expression matrix
vst_expr <- vst_expr[1:10, ]
##  Fit the Models
lmm_fit<- corrSeq_fit(formula = ~ group * time + (1|ids),
expr_mat = vst_expr,
sample_data = sample_meta_data,
method="lmm")
View(gee_fit)
View(lmm_fit)
View(nbmm_ml_fit)
View(nbmm_pl_fit)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq.summary(corrSeq_results = fit.lmerSeq,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
devtools::document()
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq.summary(corrSeq_results = fit.lmerSeq,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
?corrSeq_summary
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq_summary(corrSeq_results = fit.lmerSeq,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
devtools::document()
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
devtools::document()
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
devtools::document()
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
counts=simdata$counts[1:10,]
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
weights
model_sum <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
devtools::document()
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
devtools::document()
library(corrRNASeq)
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
View(model_sum)
View(model_sum[["summary_table"]])
devtools::document()
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Summarize the group coefficient with Satterthwaite degrees of freedom
model_sum <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
coefficient = "group",
p_adj_method = 'BH',
ddf = 'Satterthwaite',
sort_results = T)
View(nbmm_pl_fit)
View(model_sum)
View(model_sum[["summary_table"]])
data("simdata")
sample_meta_data <- simdata$metadata
#Subset down to one observation (i.e. gene)
counts=simdata$counts[1,]
#Combine counts, metadata into dataframe
df=cbind(counts, sample_meta_data)
#Sort data by id (Function also does this if sort=T)
df=df[order(df$ids),]
#Fit the Model-use Pan method for small sample variance
fit.gee.pan<-geeglm_small_samp(formula =counts ~ group * time,
family=poisson, data=df, id=ids,
corstr="exchangeable",
small.samp.method="pan", sort=T)
View(fit.gee.pan)
data("simdata")
sample_meta_data <- simdata$metadata
#Subset down to one observation (i.e. gene)
counts=simdata$counts[1,]
#Combine counts, metadata into dataframe
df=cbind(counts, sample_meta_data)
#Fit the Model
fit.glmm.nb <- glmm_nb_lmer(formula =counts ~ group * time + (1|ids),
data=df, REML = T)
View(nbmm_pl_fit)
View(fit.glmm.nb)
class(fit.glmm.nb)
