<<<<<<< HEAD
for (i in 1:size) {
y <- as.matrix(data$response[data$id == unique(data$id)[i]])
covariate <- as.matrix(subset(mat[, -length(mat[1, ])],
mat$subj == unique(data$id)[i]))
#EAW added fitted values so don't have to solve using link
mu=as.matrix(gee.fit$fitted.values[data$id == unique(data$id)[i]])
if(small.samp.method=="pan"){
if (family == "gaussian") {
resid <- (y - mu) %*% t(y - mu)
step <- step + resid
}
else if (family == "poisson") {
resid <- (y - mu) %*% t(y -
mu)
B <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(B) <- 1/sqrt(mu)
step <- step + B %*% resid %*% B
}
}else if(small.samp.method=="md"){
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if (family == "gaussian") {
xx <- t(covariate) %*% solve(var_i) %*% covariate
step11 <- step11 + xx
}
else if (family == "poisson") {
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xx <- t(D) %*% solve(Vi) %*% D
step11 <- step11 + xx
}
}else if(small.samp.method=="wl"){
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if (family == "gaussian") {
xx <- t(covariate) %*% solve(var_i) %*% covariate
step01 <- step01 + xx
}
else if (family == "poisson") {
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xx <- t(D) %*% solve(Vi) %*% D
step01 <- step01 + xx
}
}
}
if(small.samp.method=="wl"){
step <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
for (i in 1:size) {
y <- as.matrix(data$response[data$id == unique(data$id)[i]])
covariate <- as.matrix(subset(mat[, -length(mat[1, ])],
mat$subj == unique(data$id)[i]))
#EAW added fitted values so don't have to solve using link
mu=as.matrix(gee.fit$fitted.values[data$id == unique(data$id)[i]])
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if (family == "gaussian") {
resid <- solve(cormax.ind(cluster$n[i]) - covariate %*%
solve(step01) %*% t(covariate) %*% solve(var_i)) %*%
(y - mu)
step <- step + resid %*% t(resid)
}
else if (family == "poisson") {
B <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(B) <- 1/sqrt(mu)
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
resid <- B %*% solve(cormax.ind(cluster$n[i]) - D %*%
solve(step01) %*% t(D) %*% solve(Vi)) %*% (y -mu)
step <- step + resid %*% t(resid)
}
}
}
if(small.samp.method%in% c("pan", "wl")){
unstr <- step/size
step11 <- matrix(0, nrow = len, ncol = len)
}
step12 <- matrix(0, nrow = len, ncol = len)
step13 <- matrix(0, nrow = len_vec, ncol = 1)
step14 <- matrix(0, nrow = len_vec, ncol = len_vec)
p <- matrix(0, nrow = len_vec, ncol = size)
for (i in 1:size) {
y <- as.matrix(data$response[data$id == unique(data$id)[i]])
covariate <- as.matrix(subset(mat[, -length(mat[1, ])],
mat$subj == unique(data$id)[i]))
#EAW added fitted values so don't have to solve using link
mu=as.matrix(gee.fit$fitted.values[data$id == unique(data$id)[i]])
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if(small.samp.method=="pan"){
if (family == "gaussian") {
xy <- t(covariate) %*% solve(var_i) %*% unstr %*%
solve(var) %*% covariate
xx <- t(covariate) %*% solve(var_i) %*% covariate
step11 <- step11 + xx
step12 <- step12 + xy
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
else if (family == "poisson") {
A <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(A) <- mu
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xy <- t(D) %*% solve(Vi) %*% sqrt(A) %*% unstr %*%
sqrt(A) %*% solve(Vi) %*% D
xx <- t(D) %*% solve(Vi) %*% D
step12 <- step12 + xy
step11 <- step11 + xx
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
}else if(small.samp.method=="md"){
if (family == "gaussian") {
xy <- t(covariate) %*% solve(var_i) %*% solve(cormax.ind(cluster$n[i]) -
covariate %*% solve(step11) %*% t(covariate) %*%
solve(var_i)) %*% (y - mu)
step12 <- step12 + xy %*% t(xy)
step13 <- step13 + matrixcalc::vec(xy %*% t(xy))
p[, i] <- matrixcalc::vec(xy %*% t(xy))
}
else if (family == "poisson") {
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xy <- t(D) %*% solve(Vi) %*% solve(cormax.ind(cluster$n[i]) -
D %*% solve(step11) %*% t(D) %*% solve(Vi)) %*%
(y - mu)
step12 <- step12 + xy %*% t(xy)
step13 <- step13 + matrixcalc::vec(xy %*% t(xy))
p[, i] <- matrixcalc::vec(xy %*% t(xy))
}
}else if(small.samp.method=="wl"){
if (family == "gaussian") {
xy <- t(covariate) %*% solve(var_i) %*% unstr %*%
solve(var) %*% covariate
xx <- t(covariate) %*% solve(var_i) %*% covariate
step11 <- step11 + xx
step12 <- step12 + xy
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
else if (family == "poisson") {
B <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(B) <- mu
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xy <- t(D) %*% solve(Vi) %*% sqrt(B) %*% unstr %*%
sqrt(B) %*% solve(Vi) %*% D
xx <- t(D) %*% solve(Vi) %*% D
step11 <- step11 + xx
step12 <- step12 + xy
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
}
}
for (i in 1:size) {
dif <- (p[, i] - step13/size) %*% t(p[, i] - step13/size)
step14 <- step14 + dif
}
cov.beta <- solve(step11) %*% (step12) %*% solve(step11)
cov.var <- size/(size - 1) * kronecker(solve(step11), solve(step11)) %*%
step14 %*% kronecker(solve(step11), solve(step11))
gee.fit$small.samp.var<-diag(cov.beta)
gee.fit$geese$vbeta<- cov.beta
names(gee.fit$small.samp.var)<-names(gee.fit$coefficients)
}
#gee.fit$call<-call
return(gee.fit)
}
))))))))))))
geeglm_small_samp<-function (formula,
family = poisson,
data,
id,
corstr = "exchangeable",
small.samp.method=NULL,
sort=T,
...)
{
call <- match.call(expand.dots = TRUE)
if (is.null(data$id)) {
index <- which(names(data) == id)
data$id <- data[, index]
}
init <- model.frame(formula, data)
init$num <- 1:length(init[, 1])
if (any(is.na(init))) {
index <- na.omit(init)$num
data <- data[index, ]
m <- model.frame(formula, data)
mt <- attr(m, "terms")
data$response <- model.response(m, "numeric")
mat <- as.data.frame(model.matrix(formula, m))
}
else {
m <- model.frame(formula, data)
mt <- attr(m, "terms")
data$response <- model.response(m, "numeric")
mat <- as.data.frame(model.matrix(formula, m))
}
#################Make sure data is sorted################
if(sort) {
data<-data[order(data[[paste(call$id)]]),]
call$data=quote(data)
}
###Use geepack model (geesmv fits "gee" package model)###
#Calling geeglm
call_list<-as.list(call)
if(is.null(call_list$family)) call_list$family=quote(poisson)
if(is.null(call_list$corstr)) call_list$corstr="exchangeable"
call_list[[1]]<-call_list$small.samp.method<-call_list$sort<-NULL
gee.fit<-do.call("geeglm", call_list)
#If small samp method is provided
if(!is.null(small.samp.method)){
beta_est <- gee.fit$coefficients
alpha <- summary(gee.fit)$corr[[1]]
#########Drawing largely from code from geesmv package############
len <- length(beta_est)
len_vec <- len^2
data$id <- as.numeric(factor(gee.fit$id)) ## EAW: 1st make factor in case id is character vector
cluster <- cluster.size(data$id)
ncluster <- max(cluster$n)
size <- cluster$m
mat$subj <- rep(unique(data$id), cluster$n)
if (is.character(corstr)) {
var <- switch(corstr, independence = cormax.ind(ncluster),
exchangeable = cormax.exch(ncluster, alpha), `AR-M` = cormax.ar1(ncluster,
alpha), unstructured = summary(gee.fit)$working.correlation
=======
#get rid of ddf (artifact from lmerseq, gets added later)
ret2$ddf<-NULL
}else{
#Check if models are Null
if( sum(sapply(corrSeq_results, function(x) !(is.null(x))))==0){
stop("Model fits for all genes are null")
}
#Get first non-null model
idx_non_null_1=which(!sapply(corrSeq_results, is.null))[1]
#For gee models
if("geeglm"%in%class(corrSeq_results[[idx_non_null_1]])){
method="gee"
#Get coef names
coef_names <- names(corrSeq_results[[idx_non_null_1]]$coefficients)
#df methods for gee
if(contrast_tf){
df_methods=NA
}else df_methods=c("containment", "residual")
idx_not_converged<-which(sapply(corrSeq_results, is.null))
idx_converged_not_singular=which(!(1:length(corrSeq_results)%in% idx_not_converged))
}else if(class(corrSeq_results[[idx_non_null_1]])=="glmm_nb_mod"){
method="nbmm_pl"
coef_names<-names(lme4::fixef(corrSeq_results[[idx_non_null_1]]))
if(joint_flag){
df_methods=c("Satterthwaite", "Kenward-Roger")
}else df_methods=c("containment", "residual", "Satterthwaite", "Kenward-Roger")
idx_singular<-which(sapply(corrSeq_results, function(x) if(is.null(x)) F else lme4::isSingular(x)))
idx_not_converged<-which(sapply(corrSeq_results, function(x) if(!is.null(x)) x@converged==F else T))
idx_converged_not_singular <- which(!(1:length(corrSeq_results)%in% c(idx_not_converged, idx_singular)))
}else if(class(corrSeq_results[[idx_non_null_1]])=="glmmadmb"){
method="nbmm_lp"
coef_names=names(coef(corrSeq_results[[idx_non_null_1]]))
idx_not_converged<-which(sapply(corrSeq_results, is.null))
idx_singular<-which(sapply(corrSeq_results, function(x){
any(sapply(x$S, function(x) any(diag(x)<1e-05)))
})
>>>>>>> d5774622db628e6e38d02726eecd92c73b426fcd
)
}
else {
print(corstr)
stop("'working correlation structure' not recognized")
}
if (is.character(family)) {
family <- switch(family, gaussian = "gaussian",
poisson = "poisson")
}
else {
if (is.function(family)) {
family <- family()[[1]]
}
else {
print(family)
stop("'family' not recognized")
}
}
if(small.samp.method=="wl"){
m <- model.frame(formula, data)
mat <- as.data.frame(model.matrix(formula, m))
mat$subj <- rep(unique(data$id), cluster$n)
}
cov.beta <- unstr <- matrix(0, nrow = len, ncol = len)
if(small.samp.method=="pan") step <- matrix(0, nrow = cluster$n[1], ncol = cluster$n[1])
else if(small.samp.method=="md") step11 <- matrix(0, nrow = len, ncol = len)
else if(small.samp.method=="wl")step01 <- matrix(0, nrow = len, ncol = len)
for (i in 1:size) {
y <- as.matrix(data$response[data$id == unique(data$id)[i]])
covariate <- as.matrix(subset(mat[, -length(mat[1, ])],
mat$subj == unique(data$id)[i]))
#EAW added fitted values so don't have to solve using link
mu=as.matrix(gee.fit$fitted.values[data$id == unique(data$id)[i]])
if(small.samp.method=="pan"){
if (family == "gaussian") {
resid <- (y - mu) %*% t(y - mu)
step <- step + resid
}
else if (family == "poisson") {
resid <- (y - mu) %*% t(y -
mu)
B <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(B) <- 1/sqrt(mu)
step <- step + B %*% resid %*% B
}
}else if(small.samp.method=="md"){
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if (family == "gaussian") {
xx <- t(covariate) %*% solve(var_i) %*% covariate
step11 <- step11 + xx
}
else if (family == "poisson") {
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xx <- t(D) %*% solve(Vi) %*% D
step11 <- step11 + xx
}
}else if(small.samp.method=="wl"){
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if (family == "gaussian") {
xx <- t(covariate) %*% solve(var_i) %*% covariate
step01 <- step01 + xx
}
else if (family == "poisson") {
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xx <- t(D) %*% solve(Vi) %*% D
step01 <- step01 + xx
}
}
}
if(small.samp.method=="wl"){
step <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
for (i in 1:size) {
y <- as.matrix(data$response[data$id == unique(data$id)[i]])
covariate <- as.matrix(subset(mat[, -length(mat[1, ])],
mat$subj == unique(data$id)[i]))
#EAW added fitted values so don't have to solve using link
mu=as.matrix(gee.fit$fitted.values[data$id == unique(data$id)[i]])
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if (family == "gaussian") {
resid <- solve(cormax.ind(cluster$n[i]) - covariate %*%
solve(step01) %*% t(covariate) %*% solve(var_i)) %*%
(y - mu)
step <- step + resid %*% t(resid)
}
else if (family == "poisson") {
B <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(B) <- 1/sqrt(mu)
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
resid <- B %*% solve(cormax.ind(cluster$n[i]) - D %*%
solve(step01) %*% t(D) %*% solve(Vi)) %*% (y -mu)
step <- step + resid %*% t(resid)
}
}
}
if(small.samp.method%in% c("pan", "wl")){
unstr <- step/size
step11 <- matrix(0, nrow = len, ncol = len)
}
step12 <- matrix(0, nrow = len, ncol = len)
step13 <- matrix(0, nrow = len_vec, ncol = 1)
step14 <- matrix(0, nrow = len_vec, ncol = len_vec)
p <- matrix(0, nrow = len_vec, ncol = size)
for (i in 1:size) {
y <- as.matrix(data$response[data$id == unique(data$id)[i]])
covariate <- as.matrix(subset(mat[, -length(mat[1, ])],
mat$subj == unique(data$id)[i]))
#EAW added fitted values so don't have to solve using link
mu=as.matrix(gee.fit$fitted.values[data$id == unique(data$id)[i]])
var_i = var[1:cluster$n[i], 1:cluster$n[i]]
if(small.samp.method=="pan"){
if (family == "gaussian") {
xy <- t(covariate) %*% solve(var_i) %*% unstr %*%
solve(var) %*% covariate
xx <- t(covariate) %*% solve(var_i) %*% covariate
step11 <- step11 + xx
step12 <- step12 + xy
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
else if (family == "poisson") {
A <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(A) <- mu
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xy <- t(D) %*% solve(Vi) %*% sqrt(A) %*% unstr %*%
sqrt(A) %*% solve(Vi) %*% D
xx <- t(D) %*% solve(Vi) %*% D
step12 <- step12 + xy
step11 <- step11 + xx
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
}else if(small.samp.method=="md"){
if (family == "gaussian") {
xy <- t(covariate) %*% solve(var_i) %*% solve(cormax.ind(cluster$n[i]) -
covariate %*% solve(step11) %*% t(covariate) %*%
solve(var_i)) %*% (y - mu)
step12 <- step12 + xy %*% t(xy)
step13 <- step13 + matrixcalc::vec(xy %*% t(xy))
p[, i] <- matrixcalc::vec(xy %*% t(xy))
}
else if (family == "poisson") {
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xy <- t(D) %*% solve(Vi) %*% solve(cormax.ind(cluster$n[i]) -
D %*% solve(step11) %*% t(D) %*% solve(Vi)) %*%
(y - mu)
step12 <- step12 + xy %*% t(xy)
step13 <- step13 + matrixcalc::vec(xy %*% t(xy))
p[, i] <- matrixcalc::vec(xy %*% t(xy))
}
}else if(small.samp.method=="wl"){
if (family == "gaussian") {
xy <- t(covariate) %*% solve(var_i) %*% unstr %*%
solve(var) %*% covariate
xx <- t(covariate) %*% solve(var_i) %*% covariate
step11 <- step11 + xx
step12 <- step12 + xy
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
else if (family == "poisson") {
B <- matrix(0, nrow = cluster$n[i], ncol = cluster$n[i])
diag(B) <- mu
D <- mat.prod(covariate, mu)
Vi <- diag(sqrt(c(mu)),
cluster$n[i]) %*% var_i %*% diag(sqrt(c(mu)), cluster$n[i])
xy <- t(D) %*% solve(Vi) %*% sqrt(B) %*% unstr %*%
sqrt(B) %*% solve(Vi) %*% D
xx <- t(D) %*% solve(Vi) %*% D
step11 <- step11 + xx
step12 <- step12 + xy
step13 <- step13 + matrixcalc::vec(xy)
p[, i] <- matrixcalc::vec(xy)
}
}
}
for (i in 1:size) {
dif <- (p[, i] - step13/size) %*% t(p[, i] - step13/size)
step14 <- step14 + dif
}
cov.beta <- solve(step11) %*% (step12) %*% solve(step11)
cov.var <- size/(size - 1) * kronecker(solve(step11), solve(step11)) %*%
step14 %*% kronecker(solve(step11), solve(step11))
gee.fit$small.samp.var<-diag(cov.beta)
gee.fit$geese$vbeta<- cov.beta
names(gee.fit$small.samp.var)<-names(gee.fit$coefficients)
}
#gee.fit$call<-call
return(gee.fit)
}
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
gee_fit[[1]]
summary(gee_fit$gene_1)
library(corrRNASeq)
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
gee_fit[[1]]
summary(gee_fit$gene_1)
library(corrRNASeq)
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
summary(gee_fit$gene_1)
View(counts)
View(sample_meta_data)
library(corrRNASeq)
sample_meta_data=sample_meta_data[-1,]
counts=counts[,-1]
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
rm(corrSeq_summary())
rm(corrSeq_summary
)
corrSeq_summary(gee_fit, coefficient = "group1", df="residual")
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
View(gee_fit)
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
<<<<<<< HEAD
method="gee",
id=ids,
small.samp.method="wl")
View(gee_fit)
sample_meta_data=sample_meta_data[-1,]
View(sample_meta_data)
counts=counts[,-1]
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids)
View(gee_fit)
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids, small.samp.method = "wl")
View(gee_fit)
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids)
corrSeq_summary(gee_fit, coefficient = "group1", df="residual")
library(corrRNASeq)
corrSeq_summary(gee_fit, coefficient = "group1", df="residual")
corrSeq_summary(gee_fit, coefficient = "group1", df="containment")
=======
method="nbmm_pl")
## Test for differential expression between groups at any timepoints
contrast_mat<-rbind(c(0, 1, 0, 0, 0, 0, 0, 0), #Difference in groups at time1
c(0, 1, 0, 0, 0, 1, 0, 0), #Difference in groups at time2
c(0, 1, 0, 0, 0, 0, 1, 0), #Difference in groups at time3
c(0, 1, 0, 0, 0, 0, 0, 1)  #Difference in groups at time4
)
group_sum <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
contrast = contrast_mat,
p_adj_method = 'BH',
df = 'Satterthwaite',
sort_results = T)
## Test for differential expression between groups at time 1
group_diff_time1 <-corrSeq_summary(corrSeq_results = nbmm_pl_fit,
coefficient = "group1",
p_adj_method = 'BH',
df = 'Satterthwaite',
sort_results = T)
library(lmerTest)
library(topGO)
library(dplyr)
library(ggplot2)
library(pheatmap)
####################
# Make Heatmaps
####################
lmm_cs_predict <- readRDS("C:/Users/ewynn/Repositories/long_rnaseq_rnd2/application_results/enrichment_analysis/lmm_cs_predict.RDS")
lmm_ss_predict <- readRDS("C:/Users/ewynn/Repositories/long_rnaseq_rnd2/application_results/enrichment_analysis/lmm_ss_predict.RDS")
lmm <- readRDS("C:/Users/ewynn/Repositories/long_rnaseq_rnd2/application_results/model_summaries/lmm.RDS")
cs_hm=pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete")
cs_clus_raw=cutree(cs_hm$tree_row, k=7)
cs_clus=data.frame(Cluster=paste0("c",cs_clus_raw))
cs_clus$Cluster=sapply(cs_clus$Cluster,function(x){
switch(x, "c7"="1", "c3"="2",
"c1"="3",
"c4"="4", "c2"="5",
"c5"="6", "c6"="7"
)
})
rownames(cs_clus)=rownames(lmm_cs_predict)
hmcol<-colorRampPalette(RColorBrewer::brewer.pal(9,"RdBu"))(256)
ann_col_cs=list(Cluster=c("#ee7733", "#EE3377","#332288","#ddaa33","#aa3377",
"#009988","#33bbee"))
names(ann_col_cs$Cluster)=paste0(1:7)
pdf("plots/final_plots/figure3.pdf", width=9, height = 6)
setwd("C:/Users/ewynn/Repositories/long_rnaseq_rnd2")
pdf("plots/final_plots/figure3.pdf", width=9, height = 6)
pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete", cutree_rows = 7,
main="Cardiogenic Shock", annotation_row = cs_clus, annotation_colors = ann_col_cs,
annotation_names_row = F, angle_col = 0, labels_col = c("Time 1", "Time 2", "Time 3"),
color = rev(hmcol))
dev.off()
dev.off()
dev.off()
pdf("plots/final_plots/figure3.pdf", width=9, height = 6)
pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete", cutree_rows = 7,
main="Cardiogenic Shock", annotation_row = cs_clus, annotation_colors = ann_col_cs,
annotation_names_row = F, angle_col = 0, labels_col = c("Time 1", "Time 2", "Time 3"),
color = rev(hmcol))
dev.off()
pdf("plots/final_plots/figure3.pdf", width=12, height = 8)
pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete", cutree_rows = 7,
main="Cardiogenic Shock", annotation_row = cs_clus, annotation_colors = ann_col_cs,
annotation_names_row = F, angle_col = 0, labels_col = c("Time 1", "Time 2", "Time 3"),
color = rev(hmcol))
dev.off()
pdf("plots/final_plots/figure3.pdf", width=3, height = 2)
pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete", cutree_rows = 7,
main="Cardiogenic Shock", annotation_row = cs_clus, annotation_colors = ann_col_cs,
annotation_names_row = F, angle_col = 0, labels_col = c("Time 1", "Time 2", "Time 3"),
color = rev(hmcol))
dev.off()
pdf("plots/final_plots/figure3.pdf", width=4, height = 6)
pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete", cutree_rows = 7,
main="Cardiogenic Shock", annotation_row = cs_clus, annotation_colors = ann_col_cs,
annotation_names_row = F, angle_col = 0, labels_col = c("Time 1", "Time 2", "Time 3"),
color = rev(hmcol))
dev.off()
pdf("plots/final_plots/figure3.pdf", width=6, height = 4)
pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete", cutree_rows = 7,
main="Cardiogenic Shock", annotation_row = cs_clus, annotation_colors = ann_col_cs,
annotation_names_row = F, angle_col = 0, labels_col = c("Time 1", "Time 2", "Time 3"),
color = rev(hmcol))
dev.off()
pdf("plots/final_plots/figure3.pdf", width=6, height = 4)
pheatmap(as.matrix(lmm_cs_predict), cluster_cols = F, clustering_distance_rows = "euclidean",
scale = "row", show_rownames = F,  clustering_method = "complete", cutree_rows = 7,
main="Cardiogenic Shock", annotation_row = cs_clus, annotation_colors = ann_col_cs,
annotation_names_row = F, angle_col = 0, labels_col = c("Time 1", "Time 2", "Time 3"),
color = rev(hmcol))
dev.off()
sample_meta_data2 <- readRDS("~/repositories/coldata_AR_pre.RDS")
vst_expr2 <- readRDS("~/repositories/vst_AR_pre.RDS")
rownames(sample_meta_data2)<-gsub("-", "_", sample_meta_data2$sampleid)
table(rownames(sample_meta_data2)==colnames(vst_expr2))
library(corrRNASeq)
gee_fit=corrSeq_fit(formula=~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,
expr_mat=vst_expr2[1:5,],
sample_data=sample_meta_data2,
method="gee",
id=subjid, small.samp.method=NULL,
family="gaussian")
View(gee_fit)
corrSeq_summary(gee_fit, coefficient=2)
library(geepack)
sample_meta_data2=sample_meta_data2[order(sample_meta_data2$subjid),]
rownames(sample_meta_data2)<-gsub("-", "_", sample_meta_data2$sampleid)
table(rownames(sample_meta_data2)==colnames(vst_expr2))
gee_fit=corrSeq_fit(formula=~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,
expr_mat=vst_expr2[1:5,],
sample_data=sample_meta_data2,
method="gee",
id=subjid, small.samp.method=NULL,
family="gaussian")
summary(gee_fit$TSPAN6)
geeglm(expr~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,family = "gaussian", id = subjid, data = dat)
dat=cbind(data.frame(expr=as.numeric(vst_expr2[1,])), sample_meta_data2)
geeglm(expr~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,family = "gaussian", id = subjid, data = dat)
test=geeglm(expr~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,family = "gaussian", id = subjid, data = dat)
summary(test)
summary(sample_meta_data2)
summary(gee_fit[1])
summary(gee_fit$TSPAN6)
summary(test)
test2=corrSeq_summary(gee_fit, coefficient=2)
test2$summary_table
summary(test)
summary(gee_fit$TSPAN6)
test2$summary_table
test2=corrSeq_summary(gee_fit, coefficient=2, df = "containment")
?corrSeq_summary
test2=corrSeq_summary(gee_fit, coefficient=2, df = "residual")
test2=corrSeq_summary(gee_fit, coefficient=2, df = "containment")
model=gee_fit[[1]]
df="containment"
method=="gee"
method="gee"
#if nbmm_lp, fit lmm in order to get zmat and xmat
if(method=="nbmm_lp") model=lme4::lmer(formula = model$formula, data=model$data)
if(method=="lmm") model=model$fit
ids<-names(ranef(model))
#if(length(unique(table(model$id)))!=1) stop("Must have the same number of measurements for each subject")
x_mat=model.matrix(model$formula, model$data)
model.matrix(~-1+as.factor(model$id))
z_mat=model.matrix(~-1+as.factor(model$id))
View(z_mat)
xz_mat<-cbind(z_mat, model$model)
View(xz_mat)
xz_rank<-qr(xz_mat)$rank
qr(xz_mat)
?qr
View(z_mat)
test2=corrSeq_summary(gee_fit, coefficient=2, df = "residual")
test2$summary_table
gee_fit=corrSeq_fit(formula=~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,
expr_mat=vst_expr2,
sample_data=sample_meta_data2,
method="gee",
id=subjid, small.samp.method=NULL,
family="gaussian")
View(sample_meta_data2)
summary(test2)
test2$summary_table
summary(test)
summary(gee_fit$TSPAN6)
rownames(sample_meta_data2)<-gsub("-", "_", sample_meta_data2$sampleid)
table(rownames(sample_meta_data2)==colnames(vst_expr2))
library(corrRNASeq)
gee_fit=corrSeq_fit(formula=~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,
expr_mat=vst_expr2,
sample_data=sample_meta_data2,
method="gee",
id=subjid, small.samp.method=NULL,
family="gaussian")
rownames(sample_meta_data2)<-gsub("-", "_", sample_meta_data2$sampleid)
table(rownames(sample_meta_data2)==colnames(vst_expr2))
library(corrRNASeq)
gee_fit=corrSeq_fit(formula=~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,
expr_mat=vst_expr2[1:5,],
sample_data=sample_meta_data2,
method="gee",
id=subjid, small.samp.method=NULL,
family="gaussian")
sample_meta_data2=sample_meta_data2[order(sample_meta_data2$subjid),]
dat=cbind(data.frame(expr=as.numeric(vst_expr2[1,])), sample_meta_data2)
test2=corrSeq_summary(gee_fit, coefficient=2, df = "residual")
test=geeglm(expr~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,family = "gaussian", id = subjid, data = dat)
summary(test)
summary(gee_fit$TSPAN6)
order(sample_meta_data2$subjid)
?geeglm
?geeglm
summary(test)
test=geeglm(expr~nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,family = "gaussian", id = subjid, data = dat,
corstr = "exchangeable")
summary(test)
summary(gee_fit$TSPAN6)
test2$summary_table
gee_fit=corrSeq_fit(formula=~dat$nasal.cs.dev+age.sub+sex2.y+bmi+asthma.sub+minority,
expr_mat=vst_expr2[1:5,],
sample_data=sample_meta_data2,
method="gee",
id=subjid, small.samp.method=NULL,
family="gaussian",
sort=F)
View(gee_fit)
>>>>>>> d5774622db628e6e38d02726eecd92c73b426fcd
