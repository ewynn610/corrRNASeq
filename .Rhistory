if(contrast_tf){
df=GLMMadaptive::anova(x, L=rbind(contrast))$aovTab.L
colnames(df)[colnames(df)=="Pr(>|Chi|)"]<-"p_val_raw"
}else{
df=summary(x)$coef_table[coefficient,]
names(df)[names(df)=="p-value"]<-"p_val_raw"
}
}
df
})%>%dplyr::bind_rows()%>%
dplyr::mutate(Gene=gene_names[idx_converged_not_singular], p_val_adj=p.adjust(p_val_raw, method = p_adj_method))
idx_converged_not_singular
x=corrSeq_results[[1]]
df=GLMMadaptive::anova(x, L=rbind(contrast))$aovTab.L
fit$gene_1$family
x=fit$gene_2
df=GLMMadaptive::anova(x, L=rbind(contrast))$aovTab.L
rbind(contrast)
GLMMadaptive::anova
GLMMadaptive:::anova.MixMod
L=rbind(contrast)
object=x
betas <- fixef(object)
n_betas <- length(betas)
if (!is.numeric(L) || ncol(L) != n_betas)
stop("L matrix not of appropriate dimensions. ",
"It should have ", n_betas, " columns.\n")
colnames(L) <- abbreviate(names(betas), 6)
rownames(L) <- rep("", nrow(L))
V <- vcov(object, sandwich = sandwich)
sandwich = FALSE
V <- vcov(object, sandwich = sandwich)
var_betas <- V[seq_len(n_betas), seq_len(n_betas)]
Lbetas <- c(L %*% betas)
LVtL <- L %*% tcrossprod(var_betas, L)
stat <- c(crossprod(Lbetas, solve(LVtL, Lbetas)))
solve(LVtL, Lbetas)
contrast=contrasts[[1]]
df=GLMMadaptive::anova(x, L=rbind(contrast))$aovTab.L
colnames(df)[colnames(df)=="Pr(>|Chi|)"]<-"p_val_raw"
df
class(df)
contrast=contrasts[[4]]
ret=lapply(corrSeq_results[idx_converged_not_singular], function(x){
#Estimate and std. error for gee
if(method=="gee"){
Estimate=x$coefficients[coefficient]
#if small sample method was used
if(!is.null(x$small.samp.va)){
Std.Error=sqrt(x$small.samp.var[coefficient])
}else Std.Error=summary(x)$coefficients[coefficient,"Std.err"]
}else if(method=="nbmm_pl"){
if(contrast_tf){
cont=lmerTest::contest(x, L=contrast, joint=F)$Estimate
Estimate=cont$Estimate
Std.Error=cont$`Std. Error`
}else{
Estimate=summary(x)$coefficients[coefficient,"Estimate"]
Std.Error=summary(x)$coefficients[coefficient,"Std. Error"]
}
}else if(method=="nbmm_ml"){
Estimate=summary(x)$coefficient[coefficient, "Estimate"]
Std.Error=summary(x)$coefficient[coefficient, "Std. Error"]
}
if(!is.numeric(df)&method!="ptmixed"&method!="nbmm_adq"){
df=calc_df(model=x, df=df, method=method)
}
if(method!="ptmixed"& method!="nbmm_adq"){
t.value=Estimate/Std.Error
p_val_raw=2*pt(-abs(t.value),
df=df)
df=data.frame(Estimate=Estimate, Std.Error=Std.Error, df=df,
t.value=t.value, p_val_raw=p_val_raw)
}else if(method=="ptmixed"){
if(contrast_tf){
df=tryCatch({ptmixed::wald.test(x, L=contrast)},
error = function(e) {
data.frame(chi2=NA, df=NA, P=NA)
})
names(df)[names(df)=="P"]<-"p_val_raw"
names(df)[names(df)=="chi2"]<-"Chisq"
}else{
df=tryCatch({summary(x, silent=T)$coefficients[coefficient,]},
error = function(e) {
c(Estimate=NA, "Std. error"=NA, z=NA, p.value=NA)
})
names(df)[names(df)=="p.value"]<-"p_val_raw"
names(df)[names(df)=="Std. error"]<-"Std.Err"
names(df)[names(df)=="z"]<-"z-value"
}
}else if(method=="nbmm_adq"){
if(contrast_tf){
df=tryCatch({
df=GLMMadaptive::anova(x, L=rbind(contrast))$aovTab.L
colnames(df)[colnames(df)=="Pr(>|Chi|)"]<-"p_val_raw"
},error=function(e){
data.frame(Chisq=NA, df=NA, p_val_raw=NA)
})
}else{
df=summary(x)$coef_table[coefficient,]
names(df)[names(df)=="p-value"]<-"p_val_raw"
}
}
df
})%>%dplyr::bind_rows()%>%
dplyr::mutate(Gene=gene_names[idx_converged_not_singular], p_val_adj=p.adjust(p_val_raw, method = p_adj_method))
View(ret)
contrast=contrasts[[5]]
ret=lapply(corrSeq_results[idx_converged_not_singular], function(x){
#Estimate and std. error for gee
if(method=="gee"){
Estimate=x$coefficients[coefficient]
#if small sample method was used
if(!is.null(x$small.samp.va)){
Std.Error=sqrt(x$small.samp.var[coefficient])
}else Std.Error=summary(x)$coefficients[coefficient,"Std.err"]
}else if(method=="nbmm_pl"){
if(contrast_tf){
cont=lmerTest::contest(x, L=contrast, joint=F)$Estimate
Estimate=cont$Estimate
Std.Error=cont$`Std. Error`
}else{
Estimate=summary(x)$coefficients[coefficient,"Estimate"]
Std.Error=summary(x)$coefficients[coefficient,"Std. Error"]
}
}else if(method=="nbmm_ml"){
Estimate=summary(x)$coefficient[coefficient, "Estimate"]
Std.Error=summary(x)$coefficient[coefficient, "Std. Error"]
}
if(!is.numeric(df)&method!="ptmixed"&method!="nbmm_adq"){
df=calc_df(model=x, df=df, method=method)
}
if(method!="ptmixed"& method!="nbmm_adq"){
t.value=Estimate/Std.Error
p_val_raw=2*pt(-abs(t.value),
df=df)
df=data.frame(Estimate=Estimate, Std.Error=Std.Error, df=df,
t.value=t.value, p_val_raw=p_val_raw)
}else if(method=="ptmixed"){
if(contrast_tf){
df=tryCatch({ptmixed::wald.test(x, L=contrast)},
error = function(e) {
data.frame(chi2=NA, df=NA, P=NA)
})
names(df)[names(df)=="P"]<-"p_val_raw"
names(df)[names(df)=="chi2"]<-"Chisq"
}else{
df=tryCatch({summary(x, silent=T)$coefficients[coefficient,]},
error = function(e) {
c(Estimate=NA, "Std. error"=NA, z=NA, p.value=NA)
})
names(df)[names(df)=="p.value"]<-"p_val_raw"
names(df)[names(df)=="Std. error"]<-"Std.Err"
names(df)[names(df)=="z"]<-"z-value"
}
}else if(method=="nbmm_adq"){
if(contrast_tf){
df=tryCatch({
df=GLMMadaptive::anova(x, L=rbind(contrast))$aovTab.L
colnames(df)[colnames(df)=="Pr(>|Chi|)"]<-"p_val_raw"
},error=function(e){
data.frame(Chisq=NA, df=NA, p_val_raw=NA)
})
}else{
df=summary(x)$coef_table[coefficient,]
names(df)[names(df)=="p-value"]<-"p_val_raw"
}
}
df
})%>%dplyr::bind_rows()%>%
dplyr::mutate(Gene=gene_names[idx_converged_not_singular], p_val_adj=p.adjust(p_val_raw, method = p_adj_method))
ret=lapply(corrSeq_results[idx_converged_not_singular], function(x){
#Estimate and std. error for gee
if(method=="gee"){
Estimate=x$coefficients[coefficient]
#if small sample method was used
if(!is.null(x$small.samp.va)){
Std.Error=sqrt(x$small.samp.var[coefficient])
}else Std.Error=summary(x)$coefficients[coefficient,"Std.err"]
}else if(method=="nbmm_pl"){
if(contrast_tf){
cont=lmerTest::contest(x, L=contrast, joint=F)$Estimate
Estimate=cont$Estimate
Std.Error=cont$`Std. Error`
}else{
Estimate=summary(x)$coefficients[coefficient,"Estimate"]
Std.Error=summary(x)$coefficients[coefficient,"Std. Error"]
}
}else if(method=="nbmm_ml"){
Estimate=summary(x)$coefficient[coefficient, "Estimate"]
Std.Error=summary(x)$coefficient[coefficient, "Std. Error"]
}
if(!is.numeric(df)&method!="ptmixed"&method!="nbmm_adq"){
df=calc_df(model=x, df=df, method=method)
}
if(method!="ptmixed"& method!="nbmm_adq"){
t.value=Estimate/Std.Error
p_val_raw=2*pt(-abs(t.value),
df=df)
df=data.frame(Estimate=Estimate, Std.Error=Std.Error, df=df,
t.value=t.value, p_val_raw=p_val_raw)
}else if(method=="ptmixed"){
if(contrast_tf){
df=tryCatch({ptmixed::wald.test(x, L=contrast)},
error = function(e) {
data.frame(chi2=NA, df=NA, P=NA)
})
names(df)[names(df)=="P"]<-"p_val_raw"
names(df)[names(df)=="chi2"]<-"Chisq"
}else{
df=tryCatch({summary(x, silent=T)$coefficients[coefficient,]},
error = function(e) {
c(Estimate=NA, "Std. error"=NA, z=NA, p.value=NA)
})
names(df)[names(df)=="p.value"]<-"p_val_raw"
names(df)[names(df)=="Std. error"]<-"Std.Err"
names(df)[names(df)=="z"]<-"z-value"
}
}else if(method=="nbmm_adq"){
if(contrast_tf){
df=tryCatch({
df=GLMMadaptive::anova(x, L=rbind(contrast))$aovTab.L
colnames(df)[colnames(df)=="Pr(>|Chi|)"]<-"p_val_raw"
df
},error=function(e){
data.frame(Chisq=NA, df=NA, p_val_raw=NA)
})
}else{
df=summary(x)$coef_table[coefficient,]
names(df)[names(df)=="p-value"]<-"p_val_raw"
}
}
df
})%>%dplyr::bind_rows()%>%
dplyr::mutate(Gene=gene_names[idx_converged_not_singular], p_val_adj=p.adjust(p_val_raw, method = p_adj_method))
View(ret)
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=NA, sort_results = F)
})
library(corrRNASeq)
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=NA, sort_results = F)
})
View(all_contrasts)
dmat=model.matrix(~group*time, data=sample_data)
contrasts=lapply(lapply(contrasts, rbind), t)
contrasts=list(
c1=c(0,1,0,0,0,0,0,1), #Difference in group at final time point
c2=c(0,0,0,0,1,0,0,1), #Difference in first and last time in trt group
#Difference in group at any timepoint
c3=rbind(c(0, 1, 0, 0, 0, 0, 0, 0), #Difference in groups at time1
c(0, 1, 0, 0, 0, 1, 0, 0), #Difference in groups at time2
c(0, 1, 0, 0, 0, 0, 1, 0), #Difference in groups at time3
c(0, 1, 0, 0, 0, 0, 0, 1)  #Difference in groups at time4
),
# Difference between any timepoints in treatment group
c4=rbind(c(0, 0, 1,  0,  0,  1,  0,  0), #Difference btwn. time1 and time2 in trt.
c(0, 0, 0,  1,  0,  0,  1,  0), #Difference btwn. time1 and time3 in trt.
c(0, 0, 0,  0,  1,  0,  0,  1), #Difference btwn. time1 and time4 in trt.
c(0, 0, 1, -1,  0,  1, -1,  0), #Difference btwn. time2 and time3 in trt.
c(0, 0, 1,  0, -1,  1,  0, -1), #Difference btwn. time2 and time4 in trt.
c(0, 0, 0,  1, -1,  0,  1, -1)  #Difference btwn. time3 and time4 in trt.
),
# Are any of the interactions significant
c5=rbind(c(0, 0, 0,  0,  0,  1,  0, 0),
c(0, 0, 0,  0,  0,  0,  1, 0),
c(0, 0, 0,  0,  0,  0,  0, 1)
),
# Any Significant Coefficients
c6=rbind(c(0, 1, 0,  0,  0,  0,  0,  0),
c(0, 0, 1,  0,  0,  0,  0,  0),
c(0, 0, 0,  1,  0,  0,  0,  0),
c(0, 0, 0,  0,  1,  0, 0,  0),
c(0, 0, 0,  0,  0,  1,  0, 0),
c(0, 0, 0,  0,  0,  0,  1, 0),
c(0, 0, 0,  0,  0,  0,  0, 1)
)
)
row_id
n_sample_per_group <- param_mat$n_sub_group[row_id]
method<-param_mat$methods[row_id]
time_points<-param_mat$time_points[row_id]
all_res=list()
print(paste("Method:", method, ", Sample Size:", n_sample_per_group))
n_sim
j
print(j)
counts <- as.matrix(sim_data$counts)[1:100,]
sample_data=data.frame(patient=factor(sim_data$ids, levels=unique(sim_data$ids)),
time=factor(sim_data$time),
group=factor(sim_data$groups))
sim_start=Sys.time()
print("Fitting Models")
if(method!="rmrnaseq"){
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = sample_data,
design = ~ group*time)
#register(MulticoreParam(12))
dds <- DESeq(dds#, parallel = T
)
if(method=="lmm"){
vsd.fixed <- varianceStabilizingTransformation(dds, blind=F)
counts<- assay(vsd.fixed)
fit=corrSeq_fit(~group*time+(1|patient), expr_mat=counts,
sample_data=sample_data,
method="lmm", parallel = T, cores = 12)
}else if(method=="nbmm_pl"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time+offset(log_offset)+(1|patient), expr_mat=counts,
sample_data=sample_data,
method="nbmm_pl", #parallel = T, cores = 12
)
}else if(method=="ptmixed"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time, expr_mat=counts, sample_data = sample_data,
method="ptmixed", offset = log_offset,id = patient)
}else if(method=="nbmm_adq"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time+offset(log_offset), expr_mat=counts, sample_data = sample_data,
method="nbmm_adq",  random=~1|patient)
}
print("Summarizing")
if(method!="ptmixed"&method!="nbmm_adq"){
all_contrasts=lapply(c("Satterthwaite", "Kenward-Roger"), function(df){
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=df, sort_results = F)
})
names(all_contrasts)=names(contrasts)
all_contrasts
})
names(all_contrasts)=c("Satterthwaite", "Kenward-Roger")
}else{
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=NA, sort_results = F)
})
names(all_contrasts)=names(contrasts)
}
##############rmRNAseq##################
}else if(method=="rmrnaseq"){
dmat=model.matrix(~group*time, data=sample_data)
contrasts=lapply(lapply(contrasts, rbind), t)
res = TC_CAR1(counts = counts,
design = dmat,
Subject = as.factor(sample_data$patient),
Time = sample_data$time,
C.matrix = contrasts,
Nboot = 100,
ncores = 12,
print.progress = T)
all_res[[j]]=list(mod_fits=res)
}
sim_end=Sys.time()
all_res[[j]]$time=sim_end-sim_start
if(method!="rmrnaseq"){
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = sample_data,
design = ~ group*time)
#register(MulticoreParam(12))
dds <- DESeq(dds#, parallel = T
)
if(method=="lmm"){
vsd.fixed <- varianceStabilizingTransformation(dds, blind=F)
counts<- assay(vsd.fixed)
fit=corrSeq_fit(~group*time+(1|patient), expr_mat=counts,
sample_data=sample_data,
method="lmm", parallel = T, cores = 12)
}else if(method=="nbmm_pl"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time+offset(log_offset)+(1|patient), expr_mat=counts,
sample_data=sample_data,
method="nbmm_pl", #parallel = T, cores = 12
)
}else if(method=="ptmixed"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time, expr_mat=counts, sample_data = sample_data,
method="ptmixed", offset = log_offset,id = patient)
}else if(method=="nbmm_adq"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time+offset(log_offset), expr_mat=counts, sample_data = sample_data,
method="nbmm_adq",  random=~1|patient)
}
print("Summarizing")
if(method!="ptmixed"&method!="nbmm_adq"){
all_contrasts=lapply(c("Satterthwaite", "Kenward-Roger"), function(df){
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=df, sort_results = F)
})
names(all_contrasts)=names(contrasts)
all_contrasts
})
names(all_contrasts)=c("Satterthwaite", "Kenward-Roger")
}else{
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=NA, sort_results = F)
})
names(all_contrasts)=names(contrasts)
}
all_res[[j]]<-list(fit=fit, contrasts_res=all_contrasts)
##############rmRNAseq##################
}else if(method=="rmrnaseq"){
dmat=model.matrix(~group*time, data=sample_data)
contrasts=lapply(lapply(contrasts, rbind), t)
res = TC_CAR1(counts = counts,
design = dmat,
Subject = as.factor(sample_data$patient),
Time = sample_data$time,
C.matrix = contrasts,
Nboot = 100,
ncores = 12,
print.progress = T)
all_res[[j]]=list(mod_fits=res)
}
sim_start
sim_end=Sys.time()
all_res[[j]]$time=sim_end-sim_start
time=end-start
time="test"
all_res$total_time=time
paste0("sim_", 1:n_sim)
all_res=list()
start=Sys.time()
for(j in 1:n_sim){
print(j)
#sim_data <- readRDS(paste0("../sim_data/sim_data_", sim_type, "_n",
#                          n_sample_per_group,"_", time_points, "x_", j, ".RDS"))
counts <- as.matrix(sim_data$counts)[1:10,]
sample_data=data.frame(patient=factor(sim_data$ids, levels=unique(sim_data$ids)),
time=factor(sim_data$time),
group=factor(sim_data$groups))
sim_start=Sys.time()
print("Fitting Models")
if(method!="rmrnaseq"){
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = sample_data,
design = ~ group*time)
#register(MulticoreParam(12))
dds <- DESeq(dds#, parallel = T
)
if(method=="lmm"){
vsd.fixed <- varianceStabilizingTransformation(dds, blind=F)
counts<- assay(vsd.fixed)
fit=corrSeq_fit(~group*time+(1|patient), expr_mat=counts,
sample_data=sample_data,
method="lmm", parallel = T, cores = 12)
}else if(method=="nbmm_pl"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time+offset(log_offset)+(1|patient), expr_mat=counts,
sample_data=sample_data,
method="nbmm_pl", #parallel = T, cores = 12
)
}else if(method=="ptmixed"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time, expr_mat=counts, sample_data = sample_data,
method="ptmixed", offset = log_offset,id = patient)
}else if(method=="nbmm_adq"){
dds = estimateSizeFactors(dds)
sample_data$log_offset <- log(sizeFactors(dds))
fit=corrSeq_fit(~group*time+offset(log_offset), expr_mat=counts, sample_data = sample_data,
method="nbmm_adq",  random=~1|patient)
}
print("Summarizing")
if(method!="ptmixed"&method!="nbmm_adq"){
all_contrasts=lapply(c("Satterthwaite", "Kenward-Roger"), function(df){
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=df, sort_results = F)
})
names(all_contrasts)=names(contrasts)
all_contrasts
})
names(all_contrasts)=c("Satterthwaite", "Kenward-Roger")
}else{
all_contrasts=lapply(contrasts, function(contrast){
sum=corrSeq_summary(fit, contrast=contrast, df=NA, sort_results = F)
})
names(all_contrasts)=names(contrasts)
}
all_res[[j]]<-list(fit=fit, contrasts_res=all_contrasts)
##############rmRNAseq##################
}else if(method=="rmrnaseq"){
dmat=model.matrix(~group*time, data=sample_data)
contrasts=lapply(lapply(contrasts, rbind), t)
res = TC_CAR1(counts = counts,
design = dmat,
Subject = as.factor(sample_data$patient),
Time = sample_data$time,
C.matrix = contrasts,
Nboot = 100,
ncores = 12,
print.progress = T)
all_res[[j]]=list(mod_fits=res)
}
sim_end=Sys.time()
all_res[[j]]$time=sim_end-sim_start
}
end=Sys.time()
time=end-start
names(all_res)=paste0("sim_", 1:n_sim)
all_res$total_time=time
file_name=paste0("../round2_results/", method,  "_n",
n_sample_per_group, "_", time_points, "x.RDS")
View(all_res)
library(ptmixed)
?ptmixed
dmat=model.matrix(~group*time, data=sample_data)
