}
coef_out <- coefficient
}
if(!(p_adj_method %in% p.adjust.methods)){
stop("Invalid p_adj_method")
}
if(!(df %in% df_methods)&!is.numeric(df)){
stop("Invalid df method")
}
if(df %in% c("Satterthwaite", "Kenward-Roger")){
ret <- do.call(rbind, lapply(corrSeq_results[idx_converged_not_singular], function(x){
# x = corrSeq_results$fitted_models[[1]]
res_sub <- summary(x, ddf = df)$coefficients[coefficient, ]
return(res_sub)
}))%>%data.frame()%>%dplyr::rename(p_val_raw ="Pr...t..")%>%dplyr::mutate(Gene=gene_names[idx_converged_not_singular],
p_val_adj = p.adjust(p_val_raw, method = p_adj_method))%>%
dplyr::select(Gene, Estimate, Std.Error="Std..Error", "df","t.value",
p_val_raw, p_val_adj)
}else{
#If df will be same for all models, calculate now
constant_df_methods=c("residual", "containment")
if(df %in% constant_df_methods){
df=calc_df(model = corrSeq_results[[1]],df = df, method=method)
}
ret=lapply(corrSeq_results[idx_converged_not_singular], function(x){
#Estimate and std. error for gee
if(method=="gee"){
Estimate=x$coefficients[coefficient]
#if small sample method was used
if(!is.null(x$small.samp.va)){
Std.Error=sqrt(x$small.samp.var[coefficient])
}else Std.Error=summary(x)$coefficients[coefficient,"Std.err"]
}else if(method=="nbmm_pl"){
Estimate=summary(x)$coefficients[coefficient,"Estimate"]
Std.Error=summary(x)$coefficients[coefficient,"Std. Error"]
}else if(method=="nbmm_ml"){
Estimate=summary(x)$coefficient[coefficient, "Estimate"]
Std.Error=summary(x)$coefficient[coefficient, "Std. Error"]
}
if(!is.numeric(df)){
df=calc_df(model=x, df=df, method=method)
}
t.value=Estimate/Std.Error
p_val_raw=2*pt(-abs(t.value),
df=df)
data.frame(Estimate=Estimate, Std.Error=Std.Error, df=df,
t.value=t.value, p_val_raw=p_val_raw)
})%>%dplyr::bind_rows()%>%
dplyr::mutate(Gene=gene_names[idx_converged_not_singular], p_val_adj=p.adjust(p_val_raw, method = p_adj_method))%>%
dplyr::select(Gene, Estimate, Std.Error, df, t.value, p_val_raw, p_val_adj)
}
rownames(ret) <- NULL
ret2 <- list(coefficient = coef_out,
summary_table = ret,
df = match.call()$df,
p_adj_method = p_adj_method)
if(method !="gee"){
genes_singular_fits <- as.character(gene_names[idx_singular])
genes_null=c(genes_singular_fits, as.character(gene_names[idx_not_converged]))%>%unique()
ret2$singular_fits = genes_singular_fits
}else genes_null=as.character(gene_names[idx_not_converged])
ret2$summary_table$Gene<-as.character(ret2$summary_table$Gene)
ret2$summary_table <- gtools::smartbind(ret2$summary_table, data.frame(Gene = genes_null))
}
ret2$summary_table<-ret2$summary_table[match(gene_names,
ret2$summary_table$Gene),]
if(sort_results){
ret2$summary_table <- ret2$summary_table %>%
dplyr::arrange(p_val_adj)
}
ret2$model_method=method
browser()
ret2$df=match.call()$df
rownames(ret2$summary_table)<-NULL
return(ret2)
}
########################################
#Calculate containment and residual df
########################################
calc_df<-function(model, df, method){
if(method=="lmm"|method=="nbmm_pl"|method=="nbmm_ml"){
#if nbmm_ml, fit lmm in order to get zmat and xmat
if(method=="nbmm_ml") model=lme4::lmer(formula = model$formula, data=model$data)
if(method=="lmm") model=model$fit
ids<-names(ranef(model))
if(length(unique(table(model@frame[,ids])))!=1) stop("Must have the same number of measurements for each subject")
x_mat=matrix(getME(model, "X"), ncol =ncol(getME(model, "X")))
if(df=="residual"){
x_rank=qr(x_mat)$rank
df_val=nrow(x_mat)-x_rank
}else if(df=="containment"){
z_mat<-matrix(getME(model, "Z"), ncol =ncol(getME(model, "Z")) )
xz_mat<-cbind(z_mat, x_mat)
xz_rank<-qr(xz_mat)$rank
df_val=nrow(model@frame)-xz_rank
}
}else if(method=="gee"){
if(length(unique(table(model$id)))!=1) stop("Must have the same number of measurements for each subject")
x_mat=model.matrix(model$formula, model$data)
if(df=="residual"){
x_rank=qr(x_mat)$rank
df_val=nrow(model$data)-x_rank
}else if(df=="containment"){
z_mat=model.matrix(~-1+as.factor(model$id))
xz_mat<-cbind(z_mat, model$model)
xz_rank<-qr(xz_mat)$rank
df_val=nrow(model$data)-xz_rank
}
}
return(df_val)
}
test<-corrSeq_summary(nbmm_pl_small, "grouptrt")
match.call()$df
match.call()
match.call(expand.dots = T)
rm(calc_df)
rm(corrSeq_summary())
rm(corrSeq_summary
)
devtools::document()
library(corrRNASeq)
test<-corrSeq_summary(nbmm_pl_small, "grouptrt")
devtools::document()
library(corrRNASeq)
test<-corrSeq_summary(nbmm_pl_small, "grouptrt")
View(test)
View(test[["summary_table"]])
test<-corrSeq_summary(nbmm_pl_small, "grouptrt", sort_results = F)
View(test)
View(test[["summary_table"]])
devtools::document()
library(corrRNASeq)
devtools::document()
library(corrRNASeq)
remove.packages("geepack", lib="~/R/R-4.0.3/library")
install.packages("C:/Users/wynne/Repositories/thesis/cluster_code/geepack_1.2-1.tar.gz", repos = NULL, type = "source")
remove.packages("geepack", lib="~/R/R-4.0.3/library")
install.packages("C:/Users/wynne/Repositories/thesis/cluster_code/geepack_1.2-1.tar.gz", repos = NULL, type = "source")
devtools::document()
library(corrRNASeq)
devtools::document()
library(corrRNASeq)
devtools::document()
library(corrRNASeq)
devtools::document()
library(corrRNASeq)
library(corrRNASeq)
devtools::document()
library(corrRNASeq)
load("C:/Users/wynne/Repositories/corrRNASeq/data/simdata.RData")
simdata$metadata$lib_size
simdata$metadata$lib_size<-NULL
simdata$metadata$lib_size
simdata$metadata$log_offset<-
group=simdata$metadata$group
simdata$metadata$log_offset<-
group=simdata$metadata$group
group=simdata$metadata$group
time=simdata$metadata$time
group_time=group*time
colData_in <- data.frame(group = group, time=time, group_time=group_time)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = colData_in,
design = ~ group + time + group_time)
colData_in <- data.frame(group = group, time=time, group_time=group_time)
View(colData_in)
counts=simdata$counts
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = colData_in,
design = ~ group + time + group_time)
dds = estimateSizeFactors(dds)
log_offset <- log(sizeFactors(dds))
simdata$metadata$log_offset<-log_offset
save(simdata, "data/simdata.RData")
save(simdata, file="data/simdata.RData")
load("C:/Users/wynne/Repositories/corrRNASeq/data/simdata.RData")
View(simdata)
View(simdata[["metadata"]])
simdata$metadata$group
simdata$metadata$ids
simdata$metadata$time
sim_dat <- readRDS("C:/Users/wynne/Repositories/thesis/Raw_simulation/sim_data_FDR_n3_2x_1.RDS")
View(sim_dat)
View(simdata)
deseq_offset_gee_FDR_n3_2x <- readRDS("C:/Users/wynne/Repositories/thesis/sim_results/deseq_offset_gee_FDR_n3_2x.RDS")
View(deseq_offset_gee_FDR_n3_2x)
View(deseq_offset_gee_FDR_n3_2x[[1]][["coef"]])
library(corrRNASeq)
?corrSeq_fit
sample_meta_data <- simdata$metadata
View(deseq_offset_gee_FDR_n3_2x)
View(deseq_offset_gee_FDR_n3_2x[[1]][["coef"]])
counts=simdata$counts[840:850,]
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts
## Fit GEE models using Wang-Long small sample size estimator
## Use log(library size) as an offset
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log(lib_size)),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
remove.packages("geepack", lib="~/R/R-4.0.3/library")
install.packages("geepack")
?geeglm
library(geepack)
devtools::build()
devtools::document()
library(corrRNASeq)
?corrSeq_fit
data("simdata")
sample_meta_data <- simdata$metadata
counts=simdata$counts[840:850,]
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
View(gee_fit)
?geeglm_small_samp
data("simdata")
sample_meta_data <- simdata$metadata
counts=simdata$counts[849,]
df=cbind(counts, sample_meta_data)
df=df[order(df$ids),]
geeglm(counts~group*time+offset(log_offset), family=poisson, data=df, id=ids, corstr="exchangeable")
fit.gee.pan<-geeglm_small_samp(formula =counts ~ group * time+offset(log_offset),family=poisson, data=df, id=ids,
corstr="exchangeable",
small.samp.method="pan", sort=T)
?corrSeq_fit
counts=simdata$counts
## Fit GEE models using Wang-Long small sample size estimator
## log_offset is the log size factors from the DESeq2 package
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
gee_fit$gene_1$coefficients
gee_fit$gene_849
gee_fit$gene_14673
gee_fit$gene_14673$coefficients
View(deseq_offset_gee_FDR_n3_2x[[1]][["df"]])
library(corrRNASeq)
data("simdata")
sample_meta_data <- simdata$metadata
## Subset down to 10 observation (i.e. gene)
counts=simdata$counts[1:10,]
## Fit GEE models using Wang-Long small sample size estimator
## log_offset is the log size factors from the DESeq2 package
gee_fit <- corrSeq_fit(formula = ~ group * time+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="gee",
id=ids,
small.samp.method="wl")
## Fit NBMM-PL models
nbmm_pl_fit <- corrSeq_fit(formula = ~ group * time+(1|ids)+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_pl")
## Fit NBMM-ML models
## Random effects must be factors
sample_meta_data$ids<-factor(sample_meta_data$ids)
nbmm_ml_fit <- corrSeq_fit(formula = ~ group * time+(1|ids)+offset(log_offset),
expr_mat = counts,
sample_data = sample_meta_data,
method="nbmm_ml")
## Fit LMM models to transformed data
## Use the variance transformed counts in the simdata object
## Subset down to 10 genes
vst_expr<-simdata$simdata$vst_expr[1:10,]
##  Fit the Models
lmm_fit<- corrSeq_fit(formula = ~ group * time + (1|ids),
expr_mat = vst_expr,
sample_data = sample_meta_data,
method="lmm")
corrSeq_fit <- function(formula = NULL, # Formula for fixed effects
expr_mat = NULL, # Matrix of transformed RNA-Seq counts where rows are genes and columns are samples
gene_names = NULL, # A vector of gene names (the length of the number of rows in the expression matrix).  If unspecified, rownames from the expression matrix will be used.
sample_data = NULL, # A data frame with sample meta data
method,
id,
small.samp.method=NULL,
parallel = F,
cores = 2,
...
){
if(method=="lmm"){
# Gene Names
browser()
if(is.null(gene_names)){
if(is.null(rownames(expr_mat))==T){rownames(expr_mat)<-paste("gene_", seq(1,nrow(expr_mat),1))}
gene_names =  rownames(expr_mat)
}
ret=lmerSeq::lmerSeq.fit(form = formula, expr_mat = expr_mat,
gene_names = gene_names,
sample_data = sample_data, parallel = parallel,
cores = cores,...)
}else{
############################################################################################################
#Error Messages for insufficient or inconsistent information
############################################################################################################
### Insufficient Information ###
if(is.null(expr_mat)==T ) {
stop("An expression matrix must be provided.")}
if(is.null(formula)==T ) {
stop("A formula must be provided.")}
if(is.null(sample_data)==T ) {
stop("sample_data is missing.")}
### Inconsistent information ###
if((ncol(expr_mat)==nrow(sample_data))==F ) {
stop("The expression matrix and sample data include differing numbers of samples.")}
if(is.null(gene_names)==F & (nrow(expr_mat)==length(gene_names))==F ) {
print("The expression matrix and gene_names indicate differing numbers of genes.
Row names of the expression matrix will be used as gene names.")
gene_names = rownames(expr_mat)
}
################################################################################################
# Calculate Default Values if none supplied
################################################################################################
# Gene Names
if(is.null(gene_names)){
if(is.null(rownames(expr_mat))==T){rownames(expr_mat)<-paste0("gene_", seq(1,nrow(expr_mat),1))}
gene_names =  rownames(expr_mat)
}
############################################################################################################
# Begin Analysis
############################################################################################################
# Make sure expr_mat is a matrix
expr_mat <- as.matrix(expr_mat)
# Ensure that contrast, gene and fixed effect names are supplied as characters
gene_names <- as.character(gene_names)
form_sub <- update(formula, expr ~ .)
if(method=="gee"){
args<-list(formula=form_sub, data=quote(dat_sub), id=substitute(id), small.samp.method=small.samp.method, ...)
method_call=geeglm_small_samp
}else if(method=="nbmm_ml"){
random=paste("(", lme4::findbars(form_sub), ")")
random<-sapply(random, function(x) gsub(" ", "", stringr::str_split(stringr::str_split(x, pattern = "\\)")[[1]], "\\|")[[1]][2]))
if(sum(sapply(random, function(x) class(sample_data[,x])!="factor"))>0) stop("All grouping variables in random effects must be factors")
args<-list(formula=form_sub, data=quote(dat_sub), #random=random,
family = "nbinom",...)
method_call=glmmADMB::glmmadmb
}else if(method=="nbmm_pl"){
args<-list(formula=form_sub, data=quote(dat_sub),...)
method_call=glmm_nb_lmer
}
if(parallel == F){
ret <- pbapply::pblapply(X = 1:nrow(expr_mat),
FUN = function(i){
dat_sub <- cbind(sample_data, data.frame(expr = as.numeric(expr_mat[i, ])))
ret_sub <- tryCatch({
tmp1 <- suppressWarnings(suppressMessages(do.call(method_call, args)))
}, error = function(e) {
ret_sub2 <- NULL
})
ret2 <- ret_sub
if(method=="nbmm_ml"&!is.null(ret2)) ret2$data=dat_sub
ret2
})
}
else{
ret <- parallel::mclapply(X = 1:nrow(expr_mat),
mc.silent = F,
mc.cores = cores,
FUN = function(i){
dat_sub <- cbind(sample_data, data.frame(expr = as.numeric(expr_mat[i, ])))
ret_sub <- tryCatch({
tmp1 <- suppressWarnings(suppressMessages(do.call(method_call, args)))
}, error = function(e) {
ret_sub2 <- NULL
})
ret2 <- ret_sub
if(method=="nbmm_ml"&!is.null(ret2)) ret2$data=dat_sub
ret2
})
}
}
names(ret)<-gene_names
return(ret)
}
lmm_fit<- corrSeq_fit(formula = ~ group * time + (1|ids),
expr_mat = vst_expr,
sample_data = sample_meta_data,
method="lmm")
expr_mat
vst_expr<-simdata$vst_expr[1:10,]
corrSeq_fit <- function(formula = NULL, # Formula for fixed effects
expr_mat = NULL, # Matrix of transformed RNA-Seq counts where rows are genes and columns are samples
gene_names = NULL, # A vector of gene names (the length of the number of rows in the expression matrix).  If unspecified, rownames from the expression matrix will be used.
sample_data = NULL, # A data frame with sample meta data
method,
id,
small.samp.method=NULL,
parallel = F,
cores = 2,
...
){
if(method=="lmm"){
# Gene Names
if(is.null(gene_names)){
if(is.null(rownames(expr_mat))==T){rownames(expr_mat)<-paste("gene_", seq(1,nrow(expr_mat),1))}
gene_names =  rownames(expr_mat)
}
ret=lmerSeq::lmerSeq.fit(form = formula, expr_mat = expr_mat,
gene_names = gene_names,
sample_data = sample_data, parallel = parallel,
cores = cores,...)
}else{
############################################################################################################
#Error Messages for insufficient or inconsistent information
############################################################################################################
### Insufficient Information ###
if(is.null(expr_mat)==T ) {
stop("An expression matrix must be provided.")}
if(is.null(formula)==T ) {
stop("A formula must be provided.")}
if(is.null(sample_data)==T ) {
stop("sample_data is missing.")}
### Inconsistent information ###
if((ncol(expr_mat)==nrow(sample_data))==F ) {
stop("The expression matrix and sample data include differing numbers of samples.")}
if(is.null(gene_names)==F & (nrow(expr_mat)==length(gene_names))==F ) {
print("The expression matrix and gene_names indicate differing numbers of genes.
Row names of the expression matrix will be used as gene names.")
gene_names = rownames(expr_mat)
}
################################################################################################
# Calculate Default Values if none supplied
################################################################################################
# Gene Names
if(is.null(gene_names)){
if(is.null(rownames(expr_mat))==T){rownames(expr_mat)<-paste0("gene_", seq(1,nrow(expr_mat),1))}
gene_names =  rownames(expr_mat)
}
############################################################################################################
# Begin Analysis
############################################################################################################
# Make sure expr_mat is a matrix
expr_mat <- as.matrix(expr_mat)
# Ensure that contrast, gene and fixed effect names are supplied as characters
gene_names <- as.character(gene_names)
form_sub <- update(formula, expr ~ .)
if(method=="gee"){
args<-list(formula=form_sub, data=quote(dat_sub), id=substitute(id), small.samp.method=small.samp.method, ...)
method_call=geeglm_small_samp
}else if(method=="nbmm_ml"){
random=paste("(", lme4::findbars(form_sub), ")")
random<-sapply(random, function(x) gsub(" ", "", stringr::str_split(stringr::str_split(x, pattern = "\\)")[[1]], "\\|")[[1]][2]))
if(sum(sapply(random, function(x) class(sample_data[,x])!="factor"))>0) stop("All grouping variables in random effects must be factors")
args<-list(formula=form_sub, data=quote(dat_sub), #random=random,
family = "nbinom",...)
method_call=glmmADMB::glmmadmb
}else if(method=="nbmm_pl"){
args<-list(formula=form_sub, data=quote(dat_sub),...)
method_call=glmm_nb_lmer
}
if(parallel == F){
ret <- pbapply::pblapply(X = 1:nrow(expr_mat),
FUN = function(i){
dat_sub <- cbind(sample_data, data.frame(expr = as.numeric(expr_mat[i, ])))
ret_sub <- tryCatch({
tmp1 <- suppressWarnings(suppressMessages(do.call(method_call, args)))
}, error = function(e) {
ret_sub2 <- NULL
})
ret2 <- ret_sub
if(method=="nbmm_ml"&!is.null(ret2)) ret2$data=dat_sub
ret2
})
}
else{
ret <- parallel::mclapply(X = 1:nrow(expr_mat),
mc.silent = F,
mc.cores = cores,
FUN = function(i){
dat_sub <- cbind(sample_data, data.frame(expr = as.numeric(expr_mat[i, ])))
ret_sub <- tryCatch({
tmp1 <- suppressWarnings(suppressMessages(do.call(method_call, args)))
}, error = function(e) {
ret_sub2 <- NULL
})
ret2 <- ret_sub
if(method=="nbmm_ml"&!is.null(ret2)) ret2$data=dat_sub
ret2
})
}
}
names(ret)<-gene_names
return(ret)
}
lmm_fit<- corrSeq_fit(formula = ~ group * time + (1|ids),
expr_mat = vst_expr,
sample_data = sample_meta_data,
method="lmm")
